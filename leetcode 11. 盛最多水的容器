#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <math.h>
#include <assert.h>



/* 11. 盛最多水的容器
 * 双指针法，遍历数组组合


给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
说明：你不能倾斜容器。

示例 1：
输入：[1,8,6,2,5,4,8,3,7]
输出：49 
解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。

示例 2：
输入：height = [1,1]
输出：1

示例 3：
输入：height = [4,3,2,1,4]
输出：16

示例 4：
输入：height = [1,2,1]
输出：2

 */


// ---------------------------解法一 开始---双层循环遍历--超时------------------------------------------------
// int maxArea(int* height, int heightSize) {
//     int result = 0;

//     int temp;
//     int left_tail = 0, right_head = 1; 
//     for (right_head; right_head < heightSize; right_head++) {
//         for (left_tail = 0; left_tail < right_head; left_tail++) {
//             temp = fmin(height[left_tail], height[right_head]) * (right_head - left_tail);
//             result = fmax(temp, result);
//         }
//     }

//     return result;
// }

// ---------------------------解法一结束--------------------------------------------------


// ---------------------------解法一 开始---双指针，从两端往中间靠近------------------------------------------------
int maxArea(int* height, int heightSize) {
    int result = 0;

    int temp;
    int left_tail = 0, right_head = heightSize -1 ; 
    while (left_tail < right_head) {
        temp = fmin(height[left_tail], height[right_head]) * (right_head - left_tail);
        result = fmax(temp, result);

        // 左右高度相等时，移动哪个无所谓，都不会比原来的大
        if (height[left_tail] >= height[right_head]) { 
            right_head--;
        } else if (height[left_tail] < height[right_head]) {
            left_tail++;
        }
    }

    return result;
}

// ---------------------------解法一结束--------------------------------------------------

int main() {
    int case_1[] = {1,8,6,2,5,4,8,3,7};
    int length_1 = sizeof(case_1)/sizeof(case_1[0]);
    int result_1 = maxArea(case_1, length_1);
    assert(result_1 == 49);

    int case_2[] = {1,1};
    int length_2 = sizeof(case_2)/sizeof(case_2[0]);
    int result_2 = maxArea(case_2, length_2);
    assert(result_2 == 1);

    int case_3[] = {4,3,2,1,4};
    int length_3 = sizeof(case_3)/sizeof(case_3[0]);
    int result_3 = maxArea(case_3, length_3);
    assert(result_3 == 16);

    int case_4[] = {1,2,1};
    int length_4 = sizeof(case_4)/sizeof(case_4[0]);
    int result_4 = maxArea(case_4, length_4);
    assert(result_4 == 2);

    return 0;
}
