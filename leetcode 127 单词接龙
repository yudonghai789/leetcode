#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

/* 127. 单词接龙
 * BFS
 *


字典 wordList 中从单词 beginWord 和 endWord 的 转换序列 是一个按下述规格形成的序列：

序列中第一个单词是 beginWord 。
序列中最后一个单词是 endWord 。
每次转换只能改变一个字母。
转换过程中的中间单词必须是字典 wordList 中的单词。
给你两个单词 beginWord 和 endWord 和一个字典 wordList ，找到从 beginWord 到 endWord 的 最短转换序列 中的 单词数目 。如果不存在这样的转换序列，返回 0。

 
示例 1：
输入：beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
输出：5
解释：一个最短转换序列是 "hit" -> "hot" -> "dot" -> "dog" -> "cog", 返回它的长度 5。

示例 2：
输入：beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
输出：0
解释：endWord "cog" 不在字典中，所以无法进行转换。
 

提示：
1 <= beginWord.length <= 10
endWord.length == beginWord.length
1 <= wordList.length <= 5000
wordList[i].length == beginWord.length
beginWord、endWord 和 wordList[i] 由小写英文字母组成
beginWord != endWord
wordList 中的所有字符串 互不相同
 */

// ---------------------------解法一 开始-------------------------------------------------
#define MAX_QUEUE_SIZE 100000

/* 判断两个节点是否相连 */
bool canChangeOneToEndword(char *a, char *b)
{
    int len = strlen(a); // 所有单词具有相同的长度, beginWord 和 endWord 是非空的
    int cnt = 0;

    for (int i = 0; i < len; i++) {
        if (a[i] != b[i]) {
            cnt++;
        }
        if (cnt > 1) {
            return false;
        }
    }
    return true;
}

int ladderLength(char * beginWord, char * endWord, char **wordList, int wordListSize)
{
    char *queue[MAX_QUEUE_SIZE] = {0};
    int start = 0;
    int end = 0;
    int *flag = (int *)malloc(sizeof(int) * wordListSize);
    memset(flag, 0, sizeof(int) * wordListSize);
    int changenum = 1;

    queue[end++] = beginWord;
    while (start < end) {
        int curlevelnum = end - start; // 遍历当前变化次数相同的单词，查看当前的word变化情况，是否满足条件
        for (int i = 0; i < curlevelnum; i++) {
            char *tem = queue[start + i];
            if (strcmp(tem, endWord) == 0) {
                return changenum; // 广度优先搜索，出现该字符的变化一定是最小步骤变化而来，可以直接返回
            }

            for (int j = 0; j < wordListSize; j++) {
                // 当前word未访问过，同时tem和当前word能够通过一次字母变化变成相同的
                if (flag[j] == 0 && canChangeOneToEndword(tem, wordList[j]) == 1) {
                    queue[end++] = wordList[j];
                    flag[j] = 1;
                }
            }
        }
        start += curlevelnum;
        changenum++;
    }

    return 0;
}
// ---------------------------解法结束-------------------------------------------------


int main()
{
	int result = 0;

    char *beginWord = "hit";
    char *endWord = "cog";
    char *wordList[] = {"hot","dot","dog","lot","log","cog"};
    int wordListSize = 6;
    // char *wordListPointer = (char *)malloc(sizeof(char) * wordListSize);
    // for (int i = 0; i < wordListSize; i++) {
	// 	wordListPointer[i] = &wordList[i];
	// }

	result = ladderLength(beginWord, endWord, wordList, wordListSize);
	printf("%d", result);

    system("pause");
    return 0;
}
