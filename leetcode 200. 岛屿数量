#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <math.h>
#include <assert.h>


/* 200. 岛屿数量
 * 二维数组的遍历，深度优先和广度优先都行。 但是广度优先算法需要再提供一个队列




给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。
岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。
此外，你可以假设该网格的四条边均被水包围。

 
示例 1：

输入：grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
输出：1
示例 2：

输入：grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
输出：3

 */


// ---------------------------解法一 开始-------------------------------------------------
void dfs(char **grid, int i, int j, int row, int col)
{
	if (i<0 || i >row - 1 || j<0 || j>col - 1 || grid[i][j] == '0') return;
	grid[i][j] = '0';
	dfs(grid, i + 1, j, row, col);
	dfs(grid, i - 1, j, row, col);
	dfs(grid, i, j + 1, row, col);
	dfs(grid, i, j - 1, row, col);
}


// gridSize是行数
// *gridColSize是列数 
int numIslands(char** grid, int gridSize, int* gridColSize) {
	int result = 0;
	for (int i = 0; i < (gridSize); i++) {
		for (int j = 0; j < (*gridColSize); j++) {
			if (grid[i][j] == '1') {
				dfs(grid, i, j, gridSize, *gridColSize);
				result++;
			}
		}
	}

	return result;
}
// ---------------------------解法结束-------------------------------------------------



int main() {
	char gradCharData_1[4][5] = {
		["1","1","1","1","0"},
		{"1","1","0","1","0"},
		{"1","1","0","0","0"},
		{"0","0","0","0","0"}
	};
	int row_1 = 4;
	int cloum_1 = 5;
	char *gradRowPointer_1[4];
    for (int i = 0; i < row_1; i++) {
		gradRowPointer_1[i] = &gradCharData_1[i][0];
	}
	int result_1 = numIslands(gradRowPointer_1, row_1, &cloum_1);
	assert(result_1 == 1);

	char gradCharData_2[4][5] = {
		{'1','1','0','0','0'},
  		{'1','1','0','0','0'},
  		{'0','0','1','0','0'},
 		{'0','0','0','1','1'}
	};
	int row_2 = 4;
	int cloum_2 = 5;
	char *gradRowPointer_2[4];
    for (int i = 0; i < row_2; i++) {
		gradRowPointer_2[i] = &gradCharData_2[i][0];
	}
	int result_2 = numIslands(gradRowPointer_2, row_2, &cloum_2);
	assert(result_2 == 3);


	// 这种方式创建的字符串数组，是静态的，不能修改里面的值
	// char *gradRowPointer_2[] = {
	// 	"11000",
  	// 	"11000",
  	// 	"00100",
 	// 	"00011"
	// };
	// int row_2 = 4;
	// int cloum_2 = 5;
	// int result_2 = numIslands(gradRowPointer_2, row_2, &cloum_2);
	// assert(result_2 == 3);

	return 0;
}
