#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <math.h>
#include <assert.h>


/* 51. N 皇后
 * 回溯算法  
 * 多叉树
 */

// ---------------------------解法一 开始---从上到下求解 --是使用递归---没有的重复计算的节点，不能用备忘录空间换时间-----------------------------------------------------
typedef struct BackTracePointer {
    int length;
    char** backTracePointerValue;
} BackTracePointer;

void BackTrace(int n, int* returnSize, int** returnColumnSizes, char*** result, BackTracePointer* backTracePointer) {
    // 结束条件
    if (backTracePointer->length == n) {
        (*returnColumnSizes)[(*returnSize)] = n;
        result[(*returnSize)] = (char **)malloc(sizeof(char*) * n);  // 每一种结果都有n行
        for (int i = 0; i < backTracePointer->length; i++) {
            result[(*returnSize)][i] = (char *)malloc(sizeof(char) * (n + 1));   //每一列结果都有n个数
            memset(result[*returnSize][i], 0, (n + 1));
            for (int h = 0; h < n; h++) {
                result[(*returnSize)][i][h] = backTracePointer->backTracePointerValue[i][h];
            }
        }   
        (*returnSize)++;
        return;
    }


    for (int k = 0; k < n; k++) {
        // 回溯之前先判断 选取值的合法值
        int contrainFalg = 0;
        for (int i = 0; i < backTracePointer->length; i++) {
            if (backTracePointer->backTracePointerValue[i][k] == 'Q') { contrainFalg = 1; break; } // 同一条纵线
            for (int j = 1; j <= backTracePointer->length; j++) {
                if (k-j >= 0) { // 放置数组越界
                    if (backTracePointer->backTracePointerValue[backTracePointer->length - j][k-j] == 'Q') { contrainFalg = 1; break; }  // 同一条斜线
                }
                if (k+j < n) {  // 放置数组越界
                    if (backTracePointer->backTracePointerValue[backTracePointer->length - j][k+j] == 'Q') { contrainFalg = 1; break; }  // 同一条斜线
                }
            }
        }
        if (contrainFalg == 1) {continue; }

        // 选择合法后，进行下一层递归
        backTracePointer->backTracePointerValue[backTracePointer->length][k] = 'Q';
        backTracePointer->length++;
        BackTrace(n, returnSize, returnColumnSizes, result, backTracePointer);

        // 递归执行完：也就是在1）触发停止条件执行到底时，或者2）循环执行完毕
        backTracePointer->length--;
        backTracePointer->backTracePointerValue[backTracePointer->length][k] = '.'; 
    }
}

char*** solveNQueens(int n, int* returnSize, int** returnColumnSizes) {
    if (n <= 0) {return NULL;}
    
    int maxResultSize = n * n * n;
    char*** result = (char ***)malloc(sizeof(char**) * maxResultSize); // 结果最多个数申请, 真实的结果个数由遍历计算得到
    (*returnColumnSizes) = (int *)malloc(sizeof(int) * maxResultSize); // 结果最多个数申请, 真实的结果个数由遍历计算得到
    *returnSize = 0;
    for (int i = 0; i < maxResultSize; i++) {
        (*returnColumnSizes)[i] = 0; 
    }
    char* backTracePointerValue = (char *)malloc(sizeof(char) * n * (n + 1) );
    memset((void*)backTracePointerValue, '.', sizeof(char) * n * (n + 1));
    char** backTracePointerValuePointer = (char**)malloc(sizeof(char*) * n);
    for (int i = 0; i < n; i++) {
        backTracePointerValuePointer[i] = &backTracePointerValue[i * (n + 1)];
    }
    BackTracePointer backTracePointer = {0, backTracePointerValuePointer};
    BackTrace(n, returnSize, returnColumnSizes, result, &backTracePointer);

    free(backTracePointerValue);
    free(backTracePointerValuePointer);

    return result;
}

// ---------------------------解法一 结束--------------------------------------------------------



int main() {
    int n_1 = 4;
    int returnSize_1 = 0;
    int *returnColumnSizes_1 = NULL;
    char ***result_1 = solveNQueens(n_1, &returnSize_1, &returnColumnSizes_1);
    for (int i = 0; i < returnSize_1; i++) {
        for (int j = 0; j < n_1; j++) {
            for (int k = 0; k < n_1; k++) {
                printf("%c ", result_1[i][j][k]);
            }
            printf("\n");
        }
        printf("\n");
    }
    for (int i = 0; i < returnSize_1; i++) { 
        for (int j = 0; j < n_1; j++) {
            free(result_1[i][j]);
        }
        free(result_1[i]);
    }
    free(result_1);
    free(returnColumnSizes_1);

 

    return 0;
}



