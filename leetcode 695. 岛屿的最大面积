#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <math.h>
#include <assert.h>

/* 695. 岛屿的最大面积
 * 二维数组的遍历，深度优先和广度优先都行。 但是广度优先算法需要再提供一个队列
 *



给定一个包含了一些 0 和 1 的非空二维数组 grid 。
一个 岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在水平或者竖直方向上相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。
找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 0 。)

 

示例 1:

[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
对于上面这个给定矩阵应返回 6。注意答案不应该是 11 ，因为岛屿只能包含水平或垂直的四个方向的 1 。

示例 2:

[[0,0,0,0,0,0,0,0]]
对于上面这个给定的矩阵, 返回 0。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/max-area-of-island
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

 */


// ---------------------------解法一 开始-------------------------------------------------
#define SEARCHFALG 5

void printGrid(int** grid, int gridSize, int* gridColSize)
{
	for (int i = 0; i < gridSize; i++) {
		for (int j = 0; j < (*gridColSize); j++) {
			printf("%d", grid[i][j]);
		}
		printf("\n");
	}
	printf("------------------------\n");
}

int dfs(int **grid, int i, int j, int row, int col)
{
	if (i < 0 || i > row - 1 || j < 0 || j > col - 1 || grid[i][j] == 0 || grid[i][j] == SEARCHFALG) {
		return 0;
	}
	grid[i][j] = SEARCHFALG;
	return 1 + dfs(grid, i + 1, j, row, col) + dfs(grid, i - 1, j, row, col) + dfs(grid, i, j + 1, row, col) + dfs(grid, i, j - 1, row, col);
}


int maxAreaOfIsland(int** grid, int gridSize, int* gridColSize)
{
	int result = 0;
	int temp = 0;
	for (int i = 0; i < gridSize; i++) {
		for (int j = 0; j < (*gridColSize); j++) {
			if (grid[i][j] == 1) {
				temp = dfs(grid, i, j, gridSize, *gridColSize);
				result = (result > temp)? result: temp;
				printGrid(grid, gridSize, gridColSize);
			}
		}
	}
	
	return result;
}
// ---------------------------解法结束-------------------------------------------------



int main() {
	int gradCharData_1[8][13] = {
		{0,0,1,0,0,0,0,1,0,0,0,0,0},
		{0,0,0,0,0,0,0,1,1,1,0,0,0},
		{0,1,1,0,1,0,0,0,0,0,0,0,0},
		{0,1,0,0,1,1,0,0,1,0,1,0,0},
		{0,1,0,0,1,1,0,0,1,1,1,0,0},
		{0,0,0,0,0,0,0,0,0,0,1,0,0},
		{0,0,0,0,0,0,0,1,1,1,0,0,0},
		{0,0,0,0,0,0,0,1,1,0,0,0,0}
	};
	int row_1 = 8;
	int cloum_1 = 13;
	int *gradRowPointer_1[row_1];
    for (int i = 0; i < row_1; i++) {
		gradRowPointer_1[i] = &gradCharData_1[i][0];
	}
	int result_1 = maxAreaOfIsland(gradRowPointer_1, row_1, &cloum_1);
    assert(result_1 == 6);


	// 整数数组不能这样创建，只能这样创建字符串
	// int *gradRowPointer_2[] = {
	// 	{0,0,1,0,0,0,0,1,0,0,0,0,0},
	// 	{0,0,0,0,0,0,0,1,1,1,0,0,0},
	// 	{0,1,1,0,1,0,0,0,0,0,0,0,0},
	// 	{0,1,0,0,1,1,0,0,1,0,1,0,0},
	// 	{0,1,0,0,1,1,0,0,1,1,1,0,0},
	// 	{0,0,0,0,0,0,0,0,0,0,1,0,0},
	// 	{0,0,0,0,0,0,0,1,1,1,0,0,0},
	// 	{0,0,0,0,0,0,0,1,1,0,0,0,0}
	// };
	// int row_2 = 8;
	// int cloum_2 = 13;
	// int result_2 = maxAreaOfIsland(gradRowPointer_2, row_2, &cloum_2);
    // assert(result_2 == 6);


	return 0;
}
